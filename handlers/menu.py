# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from aiogram import types, F
from aiogram.filters import StateFilter
from states import data_collection
from keyboards import default
from aiogram.fsm.context import FSMContext
from database import SessionLocal
from models import People
from utils import queries
from loader import dp, bot
from utils.notify import notify_admins
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback query —Å –¥–∞–Ω–Ω—ã–º–∏ "yes" –∏–ª–∏ "no"
@dp.callback_query(F.data.in_(["yes", "no"]))
async def handle_repeat_choice(callback_query: types.CallbackQuery, state: FSMContext):
    message_id = callback_query.message.message_id
    if callback_query.data == "yes":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "yes", —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –∏–º—è
        await callback_query.message.answer("–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è: –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(data_collection.Form.act_full_name)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "no", –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
        await callback_query.message.answer("–û–∫, —Ç–æ–≥–¥–∞ –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        await state.clear()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "yes" –∏ "no"
    await bot.delete_message(callback_query.from_user.id, message_id)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@dp.message(StateFilter(None), F.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
async def collect_start(message: types.Message, state: FSMContext):
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–∫–µ—Ç—É —Ä–∞–Ω–µ–µ
        people = await queries.get_people(session, message.from_user.id)
        if people is not None:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª –∞–Ω–∫–µ—Ç—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–µ —Å–Ω–æ–≤–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="yes")],
                [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")]
            ])
            await message.answer("–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–µ —Å–Ω–æ–≤–∞?", reply_markup=keyboard)
            await state.set_state(data_collection.Form.repeat)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª –∞–Ω–∫–µ—Ç—É, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –∏–º—è
            await message.answer("–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è: –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            await state.set_state(data_collection.Form.act_full_name)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–î–∞" –∏–ª–∏ "–ù–µ—Ç" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "repeat"
@dp.message(data_collection.Form.repeat)
async def process_repeat(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î–∞", —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –∏–º—è
        await message.answer("–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è: –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(data_collection.Form.act_full_name)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–µ—Ç", –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
        await message.answer("–û–∫, —Ç–æ–≥–¥–∞ –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        await state.clear()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "act_full_name"
@dp.message(data_collection.Form.act_full_name)
async def process_name(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(act_full_name=message.text)
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")
    await state.set_state(data_collection.Form.act_city)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–æ—Ä–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "act_city"
@dp.message(data_collection.Form.act_city)
async def process_city(message: types.Message, state: FSMContext):
    if message.location:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(act_city=f'{message.location.latitude}, {message.location.longitude}')
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(act_city=message.text)
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç")
    await state.set_state(data_collection.Form.act_age)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "act_age"
@dp.message(data_collection.Form.act_age)
async def process_age(message: types.Message, state: FSMContext):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ
        age = int(message.text)
        if age < 1 or age > 100:
            # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 100, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 –ª–µ—Ç")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(act_age=age)
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
        await state.set_state(data_collection.Form.act_work_experience)
    except ValueError:
        # –ï—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100)")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∏ –Ω–∞–≤—ã–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(data_collection.Form.act_work_experience)
async def process_work_experience(message: types.Message, state: FSMContext):
    await state.update_data(act_work_experience=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    await state.set_state(data_collection.Form.act_education)

@dp.message(data_collection.Form.act_education)
async def process_education(message: types.Message, state: FSMContext):
    await state.update_data(act_education=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏")
    await state.set_state(data_collection.Form.act_skills)

@dp.message(data_collection.Form.act_skills)
async def process_skills(message: types.Message, state: FSMContext):
    await state.update_data(act_skills=message.text)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()

    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–∫–µ—Ç—É —Ä–∞–Ω–µ–µ
        people = await queries.get_people(session, message.from_user.id)
        if people is None:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª –∞–Ω–∫–µ—Ç—É, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            people = People(act_tg_id=message.from_user.id)
            session.add(people)
            notification_header = "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:"
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª –∞–Ω–∫–µ—Ç—É, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            notification_header = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:"
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        people.act_full_name = user_data['act_full_name']
        people.act_city = user_data['act_city']
        people.act_age = user_data['act_age']
        people.act_work_experience = user_data['act_work_experience']
        people.act_education = user_data['act_education']
        people.act_skills = user_data['act_skills']
        await session.commit()

    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã!")
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    notification_message = f"{notification_header}\n"
    notification_message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}\n"
    notification_message += f"–ò–º—è: {user_data['act_full_name']}\n"
    notification_message += f"–ì–æ—Ä–æ–¥: {user_data['act_city']}\n"
    notification_message += f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['act_age']}\n"
    notification_message += f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {user_data['act_work_experience']}\n"
    notification_message += f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_data['act_education']}\n"
    notification_message += f"–ù–∞–≤—ã–∫–∏: {user_data['act_skills']}"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    await notify_admins(notification_message)